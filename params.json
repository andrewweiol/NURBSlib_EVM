{"name":"NURBSlib_EVM","tagline":"python scripts and macros to make NURBS surfaces in FreeCAD -","body":"## NURBSlib_EVM\r\nMy python scripts for creating surfaces in [FreeCAD](http://freecadweb.org/).   \r\nExtremely early release. Makes alphas look polished :)\r\n\r\n![A semi decent G2 seam between two surfaces](https://github.com/edwardvmills/NURBSlib_EVM/blob/master/site_stuff/current_state/G2%20join%2066%20surfaces%2005.png?raw=true)\r\n\r\nAt this time, none of the entities created by these scripts are parametric. \r\nThis is the rough workflow prototyping phase. \r\nIf/when the surface creation methods reach my minimum goals, i intend to make them parametric.\r\n\r\nAll scripts in this repository are offered under the terms of the \r\n[GPLv3](http://www.gnu.org/licenses/gpl-3.0.en.html)   \r\nAll models in this repository are offered under the terms of \r\n[CC-BY](http://creativecommons.org/licenses/by/2.0/)   \r\n\r\nFor the time being, this page is intended to give a quick explanation of each tool along with pictures. \r\nYou can read more about the project [here](README.md)\r\n###Setup\r\nThere is a release, or you grab from master.\r\n\r\n-from [NURBSlib_EVM_python](https://github.com/edwardvmills/NURBSlib_EVM/tree/master/NURBSlib_EVM_python), take NURBSlib_EVM.py, all *.fcmacro files   \r\n-grab the [icons](https://github.com/edwardvmills/NURBSlib_EVM/tree/master/icons)   \r\n-put them somewhere FreeCAD can find them   \r\n-link the fcmacro scripts to icons, descriptions(use macro name), tooltips (use macro name), etc.   \r\n-put all those GUI macros in toolbars.   \r\n-add those toolbars to the PartDesign workbench. The raw material will be PartDesign sketches, so this is a good place to put the toolbars for the time being.   \r\n\r\nHere is a picture of how i like to group them:\r\n![toolbar setup](https://github.com/edwardvmills/NURBSlib_EVM/blob/master/site_stuff/basic_usage/setting%20up%20the%20toolbars.png?raw=true)\r\n###Usage\r\n**Draw sketches of lines/circles** (check each curve macro to see what inputs it wants). \r\n\r\nIn the picture below we see:  \r\n-a sketcher arc   \r\n-a sketch of three lines connected end to end   \r\n-three 'node' sketches. A node is one circle + any number of lines that start at the circle center. I have big plans for these little nodes...curvature data...derivative of curvature data...topology data!\r\n![sketches as inputs](https://github.com/edwardvmills/NURBSlib_EVM/blob/master/site_stuff/basic_usage/_01%20sketches%20as%20inputs.png?raw=true)\r\n\r\nSelect those lines/circles _in the order specified by the macro_, then hit the macro button. A curve is created.\r\nIn the picture below:   \r\n-select the arc, then hit   \r\n![Arc_to_rational_bezier](https://github.com/edwardvmills/NURBSlib_EVM/blob/master/icons/icon_bitmaps/Arc_to_rational_bezier.png?raw=true)   \r\nThis converts a sketch arc to a **cubic** **rational** bezier curve, formulated from a full NURBS.   \r\n-select the three lines from the single sketch in order, then hit   \r\n![Bezier_Cubic_3_lines](https://github.com/edwardvmills/NURBSlib_EVM/blob/master/icons/icon_bitmaps/Bezier_Cubic_3_lines.png?raw=true)    \r\nThis creates a cubic bezier curve, formulated from a full NURBS. The weights are all 1, so it's not rational _in practice_, but the weights are there, and in the future, we may modify them.   \r\n-from one node, select the circle, then the line end point, then another node, select a line endpoint, then the circle. hit   \r\n![Bezier_Cubic_2_nodes](https://github.com/edwardvmills/NURBSlib_EVM/blob/master/icons/icon_bitmaps/Bezier_Cubic_2_nodes.png?raw=true)   \r\nSame type of curve as above.   \r\n\r\nWhy the funky selection order with nodes? The circles represent curve endpoints, and the lines radiating from them represent the tangents. The multiple lines give hints as to the intended topology. This is a 3D bezier control, and picking a circle is WAY easier than trying to explain to FreeCAD which point i want when there are many lines connecting at a point. [TODO, maybe: adapt the macro so the selection goes: circle>line>cirle>line, extract the line endpoints, and reorder automatically)\r\n   \r\n![curves from sketches](https://github.com/edwardvmills/NURBSlib_EVM/blob/master/site_stuff/basic_usage/_02%20curves%20from%20sketches.png?raw=true)   \r\nThe new arc is right on top of the sketch arc, so it looks funny.\r\n\r\n**Make surfaces from the curves**   \r\nThe surface macros need to be given 3 or 4 curves of the _same type_. This is why we had to convert the arc.   \r\nThere are two types of surface right now:   \r\n-rational bezier (accepts 3 or 4 cubic rational bezier curves)   \r\n-6 pole by 6 pole NURBS (accepts 4 NURBS curves with 6 control points and a specific knot vector)\r\n\r\nFirst, lets stay with bezier (icons are mostly red)\r\n\r\nSelect 3/4 curves in a loop counterclockwise (surface normal will then point towards you), hit   \r\n![Bezier_cubic_4_sided_surface](https://github.com/edwardvmills/NURBSlib_EVM/blob/master/icons/icon_bitmaps/Bezier_cubic_4_sided_surface.png?raw=true)   \r\nThis creates a rational bezier surface.   \r\n![bezier surfaces from bezier curves](https://github.com/edwardvmills/NURBSlib_EVM/blob/master/site_stuff/basic_usage/_04%20surfaces%20from%20curves.png?raw=true)   \r\nNote that the arc edge is still a _true arc_, so we should be able to make good FreeCAD shells that join this surface type to other FreeCAD surfaces.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}
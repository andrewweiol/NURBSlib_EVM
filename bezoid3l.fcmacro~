import Part
from FreeCAD import Base
from FreeCAD import Gui
import math
import NURBSlib_EVM as Nl


#scratch pad for a 'bezoid' spline type with independent endpoint curvature. if this works well in practice, the new type will go to BezCubic.py
#the input is 4 points, like a bezier cubic curve.
#two additional control points are inserted, and the knot vector extened, in a way that tries to mimick the bezier of the four original points.
#the two additional control points can be manipulated to control the curvature at each endpoint.

# Creates a cubic spline from 3 selected lines connected 1>2>3 within the same sketch.
# The first and last lines  define the start point, end point, start tangent, and end tangent.
# The middle line mostly serves to specify end points, but can be useful for visualization of the control polygon.

#get selection contents
s=Gui.Selection.getSelectionEx()[0].SubObjects

# check basic contents of selection (seems broken right now, doesn't go to report view)
if (len(s)!=3):
	print 'Select three connected lines from one sketch (in order). Hide other elements as necessary to get the right selection'


line0=s[0].Curve # a Part.Line object
line1=s[1].Curve # a Part.Line object
line2=s[2].Curve # a Part.Line object

#orient the line endpoints to proceed from one end of the connected lines to the other. Checks for proper connection along the way
seg0=BC.orient_a_to_b([line0.StartPoint,line0.EndPoint],[line1.StartPoint,line1.EndPoint])
seg1=BC.orient_a_to_b([line1.StartPoint,line1.EndPoint],[line2.StartPoint,line2.EndPoint])
seg2_reverse=BC.orient_a_to_b([line2.StartPoint,line2.EndPoint],[line1.StartPoint,line1.EndPoint])

p0=seg0[0]
p1=seg1[0]
p2=seg2_reverse[1]
p3=seg2_reverse[0]

p0oid=p0								#same as bezier
p1oid=p0+(p1-p0).multiply(0.5)				#center of the first bezier leg
p12=(p1+p2).multiply(0.5)					#center of the middle bezier leg
p2oid=(p1oid+p12).multiply(0.5)				#center of the p1oid to p12 line
p4oid=p3+(p2-p3).multiply(0.5)				#center of the last bezier leg
p3oid=(p4oid+p12).multiply(0.5)	
p5oid=p3

'''
p0oid=p0
p1oid=p0+(p1-p0).multiply(1.0/3.0)
p2oid=p1+(p2-p1).multiply(1.0/5.0)
p3oid=p2+(p1-p2).multiply(1.0/5.0)
p4oid=p3+(p2-p3).multiply(1.0/3.0)
p5oid=p3
'''


# prepare the poles we will pass to the curve creation function
# pole = [Base.Vector, weight]
pole0=[ p0oid, 1]
pole1=[ p1oid, 1]
pole2=[ p2oid, 1]	
pole3=[ p3oid, 1]
pole4=[ p4oid, 1]
pole5=[ p5oid, 1]

ctrl1=Part.Line(p0oid, p1oid)
ctrl2=Part.Line(p1oid, p2oid)
ctrl3=Part.Line(p2oid, p3oid)
ctrl4=Part.Line(p3oid, p4oid)
ctrl5=Part.Line(p4oid, p5oid)

# prepare the pole list
poles = [pole0, pole1, pole2, pole3, pole4, pole5]


# create the cubice bezier curve from the poles (Part.BSplineCurve)
curve = Nl.SplineCubic6P_curve(poles)

Part.show(curve.toShape())
Part.show(ctrl1.toShape())
Part.show(ctrl2.toShape())
Part.show(ctrl3.toShape())
Part.show(ctrl4.toShape())
Part.show(ctrl5.toShape())















